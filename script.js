const LANGS = {
	RU_LOW_BTNS: ['—ë', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace', 'Tab', '–π', '—Ü', '—É', '–∫', '–µ', '–Ω', '–≥', '—à', '—â', '–∑', '—Ö', '—ä', '\\', 'CapsLock', '—Ñ', '—ã', '–≤', '–∞', '–ø', '—Ä', '–æ', '–ª', '–¥', '–∂', '—ç', 'Enter', 'Shift', '—è', '—á', '—Å', '–º', '–∏', '—Ç', '—å', '–±', '—é', '.', 'ArrowUp', 'Shift', 'Control', 'Alt', ' ', 'Control', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
	RU_UP_BTNS: ['–Å', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace', 'Tab', '–ô', '–¶', '–£', '–ö', '–ï', '–ù', '–ì', '–®', '–©', '–ó', '–•', '–™', '\\', 'CapsLock', '–§', '–´', '–í', '–ê', '–ü', '–†', '–û', '–õ', '–î', '–ñ', '–≠', 'Enter', 'Shift', '–Ø', '–ß', '–°', '–ú', '–ò', '–¢', '–¨', '–ë', '–Æ', '.', 'ArrowUp', 'Shift', 'Control', 'Alt', ' ', 'Control', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
	RU_SHIFT_BTNS: ['–Å', '!', '"', '‚Ññ', ';', '%', ':', '?', '*', '(', ')', '_', '+', 'Backspace', 'Tab', '–ô', '–¶', '–£', '–ö', '–ï', '–ù', '–ì', '–®', '–©', '–ó', '–•', '–™', '/', 'CapsLock', '–§', '–´', '–í', '–ê', '–ü', '–†', '–û', '–õ', '–î', '–ñ', '–≠', 'Enter', 'Shift', '–Ø', '–ß', '–°', '–ú', '–ò', '–¢', '–¨', '–ë', '–Æ', ',', 'ArrowUp', 'Shift', 'Control', 'Alt', ' ', 'Control', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
	ENG_LOW_BTNS: ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace', 'Tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\', 'CapsLock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', "'", 'Enter', 'Shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'ArrowUp', 'Shift', 'Control', 'Alt', ' ', 'Control', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
	ENG_UP_BTNS: ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace', 'Tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', '\\', 'CapsLock', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';', "'", 'Enter', 'Shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/', 'ArrowUp', 'Shift', 'Control', 'Alt', ' ', 'Control', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
	ENG_SHIFT_BTNS: ['~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', 'Backspace', 'Tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '|', 'CapsLock', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"', 'Enter', 'Shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 'ArrowUp', 'Shift', 'Control', 'Alt', ' ', 'Control', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
	KEY_CODE: ['Backquote', 'Digit1', 'Digit2', 'Digit3', 'Digit4', 'Digit5', 'Digit6', 'Digit7', 'Digit8', 'Digit9', 'Digit0', 'Minus', 'Equal', 'Backspace', 'Tab', 'KeyQ', 'KeyW', 'KeyE', 'KeyR', 'KeyT', 'KeyY', 'KeyU', 'KeyI', 'KeyO', 'KeyP', 'BracketLeft', 'BracketRight', 'Backslash', 'CapsLock', 'KeyA', 'KeyS', 'KeyD', 'KeyF', 'KeyG', 'KeyH', 'KeyJ', 'KeyK', 'KeyL', 'Semicolon', 'Quote', 'Enter', 'ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ArrowUp', 'ShiftRight', 'ControlLeft', 'AltLeft', 'Space', 'ControlRight', 'ArrowLeft', 'ArrowDown', 'ArrowRight'],
};
let lastLetter = '';

function renderKeys(keys, keysCode) {
	let out = '';
	for (let i = 0; i < keys.length; i++) {
		if (keys[i] === 'Backspace' || keys[i] === 'CapsLock' || keys[i] === 'Enter' || keys[i] === 'ArrowUp' || keys[i] === 'Control' || keys[i] === 'Alt' || keys[i] === 'ArrowLeft' || keys[i] === 'ArrowDown' || keys[i] === 'ArrowRight' || keys[i] === 'Tab') {
			out += `<div class="key key-btn ${keysCode[i]}" data-key="${keys[i]}">${keys[i]}</div>`;
		} else {
			out += `<div class="key key-letr ${keysCode[i]}" data-key="${keys[i]}">${keys[i]}</div>`;
		}
	}
	document.querySelector('.keyboard').innerHTML = out;
	document.querySelector('.ArrowUp').innerHTML = 'ü°π';
	document.querySelector('.ArrowLeft').innerHTML = 'ü°∏';
	document.querySelector('.ArrowRight').innerHTML = 'ü°∫';
	document.querySelector('.ArrowDown').innerHTML = 'ü°ª';
}

function init() {
	document.body.innerHTML = '<div class="container"><p>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞</p><textarea autofocus cols="100" rows="10"></textarea><div class="keyboard"></div><p>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows</p><p>–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: –ª–µ–≤—ãe ctrl + alt</p></div>';
	if (localStorage.getItem('lang') === null) {
		localStorage.setItem('lang', 'RU_LOW_BTNS');
	}
	renderKeys(LANGS[localStorage.lang], LANGS.KEY_CODE);
}

init();
const input = document.querySelector('textarea');
// –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', (event) => {
	// —É–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
	if (!document.querySelector(`.${event.code}`)) {
		event.preventDefault();
		return;
	}

	lastLetter = document.querySelector(`.${event.code}`).dataset.key;

	// —Ç–∞–±
	if (event.key === 'Tab') {
		event.preventDefault();
		const cursorPosition = input.selectionStart;
		let strBeforeCursor = input.value.substring(0, cursorPosition);
		const strAfterCursor = input.value.substring(cursorPosition);
		strBeforeCursor += '    ';
		input.value = strBeforeCursor + strAfterCursor;
		input.selectionStart = cursorPosition + 4;
		input.selectionEnd = cursorPosition + 4;
	}
	// –º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –∫–∞–ø—Å
	if (event.key === 'CapsLock' || event.key === 'Shift') {
		if (!event.repeat) {
			switch (localStorage.lang) {
				case 'RU_LOW_BTNS':
					localStorage.lang = 'RU_SHIFT_BTNS';
					break;
				case 'RU_SHIFT_BTNS':
					localStorage.lang = 'RU_LOW_BTNS';
					break;
				case 'ENG_LOW_BTNS':
					localStorage.lang = 'ENG_SHIFT_BTNS';
					break;
				case 'ENG_SHIFT_BTNS':
					localStorage.lang = 'ENG_LOW_BTNS';
					break;
				default:
					break;
			}
		} else {
			event.preventDefault();
		}
		renderKeys(LANGS[localStorage.lang], LANGS.KEY_CODE);
	}

	// –º–µ–Ω—è–µ–º —è–∑—ã–∫
	if (event.key === 'Alt' && event.ctrlKey) {
		switch (localStorage.lang) {
			case 'RU_LOW_BTNS':
				localStorage.lang = 'ENG_LOW_BTNS';
				break;
			case 'RU_SHIFT_BTNS':
				localStorage.lang = 'ENG_SHIFT_BTNS';
				break;
			case 'ENG_LOW_BTNS':
				localStorage.lang = 'RU_LOW_BTNS';
				break;
			case 'ENG_SHIFT_BTNS':
				localStorage.lang = 'RU_SHIFT_BTNS';
				break;
			default:
				break;
		}
		renderKeys(LANGS[localStorage.lang], LANGS.KEY_CODE);
	}
	// –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è
	document.querySelector(`.${event.code}`).classList.add('key-active');
});

// –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keyup', (event) => {
	// —É–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
	if (!document.querySelector(`.${event.code}`)) {
		event.preventDefault();
		return;
	}
	// –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ —à–∏—Ñ—Ç–∞
	if (event.key === 'Shift') {
		switch (localStorage.lang) {
			case 'RU_LOW_BTNS':
				localStorage.lang = 'RU_SHIFT_BTNS';
				break;
			case 'RU_SHIFT_BTNS':
				localStorage.lang = 'RU_LOW_BTNS';
				break;
			case 'ENG_LOW_BTNS':
				localStorage.lang = 'ENG_SHIFT_BTNS';
				break;
			case 'ENG_SHIFT_BTNS':
				localStorage.lang = 'ENG_LOW_BTNS';
				break;
			default:
				break;
		}
		renderKeys(LANGS[localStorage.lang], LANGS.KEY_CODE);
	}
	// –∞–Ω–∏–º–∞—Ü–∏—è
	document.querySelector(`.${event.code}`).classList.remove('key-active');
});

// eslint-disable-next-line no-unused-vars
document.querySelector('textarea').addEventListener('blur', function inputFocus(event) {
	this.focus();
});
document.querySelector('textarea').addEventListener('input', function addText(event) {
	// –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞
	const cursorPosition = this.selectionStart;
	let strBeforeCursor = this.value.substring(0, cursorPosition);
	const strAfterCursor = this.value.substring(cursorPosition);
	if (event.inputType === 'insertText') {
		strBeforeCursor = strBeforeCursor.substring(0, strBeforeCursor.length - 1) + lastLetter;
		this.value = strBeforeCursor + strAfterCursor;
		this.selectionStart = cursorPosition;
		this.selectionEnd = cursorPosition;
	}
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–∞–≤–µ
document.querySelector('.keyboard').addEventListener('mousedown', (event) => {
	if (event.target.classList.contains('keyboard')) {
		return;
	}
	// –∞–Ω–∏–º–∞—Ü–∏—è
	event.target.classList.add('key-active');
	// –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë –ø–æ –Ω–µ–º—É.
	const cursorPosition = input.selectionStart;
	let strBeforeCursor = input.value.substring(0, cursorPosition);
	const strAfterCursor = input.value.substring(cursorPosition);


	// –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —à–∏—Ñ—Ç
	if (event.target.classList.contains('CapsLock') || event.target.dataset.key === 'Shift') {
		switch (localStorage.lang) {
			case 'RU_LOW_BTNS':
				localStorage.lang = 'RU_SHIFT_BTNS';
				break;
			case 'RU_SHIFT_BTNS':
				localStorage.lang = 'RU_LOW_BTNS';
				break;
			case 'ENG_LOW_BTNS':
				localStorage.lang = 'ENG_SHIFT_BTNS';
				break;
			case 'ENG_SHIFT_BTNS':
				localStorage.lang = 'ENG_LOW_BTNS';
				break;
			default:
				break;
		}
		renderKeys(LANGS[localStorage.lang], LANGS.KEY_CODE);
	}
	// –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
	if (event.target.classList.contains('key-letr') && !event.target.classList.contains('ShiftLeft') && !event.target.classList.contains('ShiftRight')) {
		strBeforeCursor += event.target.dataset.key;
		input.value = strBeforeCursor + strAfterCursor;
		input.selectionStart = cursorPosition + 1;
		input.selectionEnd = cursorPosition + 1;
	}

	// –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É –≤–ª–µ–≤–æ
	if (event.target.classList.contains('ArrowLeft')) {
		if (input.selectionStart !== 0) {
			input.selectionStart -= 1;
			input.selectionEnd -= 1;
		}
	}
	// –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É –≤–ø—Ä–∞–≤–æ
	if (event.target.classList.contains('ArrowRight')) {
		if (input.selectionStart !== input.value.length) {
			input.selectionStart += 1;
			input.selectionEnd += 0;
		}
	}
	// —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
	if (event.target.classList.contains('ArrowUp')) {
		if (input.selectionStart - input.cols < 0) {
			input.selectionStart = 0;
			input.selectionEnd = 0;
		} else {
			input.selectionStart -= input.cols;
			input.selectionEnd -= input.cols;
		}
	}
	// —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
	if (event.target.classList.contains('ArrowDown')) {
		if (input.selectionStart + input.cols > input.value.length) {
			input.selectionStart = input.value.length;
			input.selectionEnd = input.value.length;
		} else {
			input.selectionStart += input.cols;
			input.selectionEnd += input.cols;
		}
	}
	// —ç–Ω—Ç–µ—Ä
	if (event.target.classList.contains('Enter')) {
		strBeforeCursor += '\n';
		input.value = strBeforeCursor + strAfterCursor;
	}
	// —Ç–∞–±
	if (event.target.classList.contains('Tab')) {
		strBeforeCursor += '    ';
		input.value = strBeforeCursor + strAfterCursor;
		input.selectionStart = cursorPosition + 4;
		input.selectionEnd = cursorPosition + 4;
	}
	// –±–µ–∫—Å–ø–µ–π—Å
	if (event.target.classList.contains('Backspace')) {
		strBeforeCursor = input.value.substring(0, strBeforeCursor.length - 1);
		input.value = strBeforeCursor + strAfterCursor;
		input.selectionStart = cursorPosition - 1;
		input.selectionEnd = cursorPosition - 1;
	}
});


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–ª–∞–≤–µ
document.querySelector('.keyboard').addEventListener('mouseup', (event) => {
	// –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ —à–∏—Ñ—Ç–∞
	if (event.target.dataset.key === 'Shift') {
		switch (localStorage.lang) {
			case 'RU_LOW_BTNS':
				localStorage.lang = 'RU_SHIFT_BTNS';
				break;
			case 'RU_SHIFT_BTNS':
				localStorage.lang = 'RU_LOW_BTNS';
				break;
			case 'ENG_LOW_BTNS':
				localStorage.lang = 'ENG_SHIFT_BTNS';
				break;
			case 'ENG_SHIFT_BTNS':
				localStorage.lang = 'ENG_LOW_BTNS';
				break;
			default:
				break;
		}
		renderKeys(LANGS[localStorage.lang], LANGS.KEY_CODE);
	}

	// –∞–Ω–∏–º–∞—Ü–∏—è
	event.target.classList.remove('key-active');
});

// —É–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —É–≤–æ–¥–∏–º –º—ã—à–∫—É
document.querySelector('.keyboard').addEventListener('mouseout', (event) => {
	event.target.classList.remove('key-active');
});
